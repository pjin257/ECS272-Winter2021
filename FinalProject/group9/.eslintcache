[{"C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\index.js":"1","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\App.js":"2","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\reportWebVitals.js":"3","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\Threat.js":"4","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\Home.js":"5","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\Threat_chart.js":"6","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\components\\Header.js":"7","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\Alliance.js":"8","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\Alliance_chart.js":"9","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\Total_alliance.js":"10","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\Total_alliance_chart.js":"11","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\GDP.js":"12","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\Area.js":"13","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\Area2.js":"14","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\AreaChart.js":"15","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\GDP_chart.js":"16","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\AreaChart2.js":"17"},{"size":517,"mtime":1614895946907,"results":"18","hashOfConfig":"19"},{"size":1199,"mtime":1615591298188,"results":"20","hashOfConfig":"19"},{"size":375,"mtime":1614619732891,"results":"21","hashOfConfig":"19"},{"size":1086,"mtime":1615591788375,"results":"22","hashOfConfig":"19"},{"size":222,"mtime":1615596606826,"results":"23","hashOfConfig":"19"},{"size":16033,"mtime":1615342161068,"results":"24","hashOfConfig":"19"},{"size":725,"mtime":1615597467265,"results":"25","hashOfConfig":"19"},{"size":1176,"mtime":1615591825214,"results":"26","hashOfConfig":"19"},{"size":15986,"mtime":1615342191864,"results":"27","hashOfConfig":"19"},{"size":1038,"mtime":1615591982309,"results":"28","hashOfConfig":"19"},{"size":8052,"mtime":1615069324379,"results":"29","hashOfConfig":"19"},{"size":1215,"mtime":1615472892000,"results":"30","hashOfConfig":"19"},{"size":1159,"mtime":1615472892000,"results":"31","hashOfConfig":"19"},{"size":1182,"mtime":1615472892000,"results":"32","hashOfConfig":"19"},{"size":4222,"mtime":1615472892000,"results":"33","hashOfConfig":"19"},{"size":7031,"mtime":1615472892000,"results":"34","hashOfConfig":"19"},{"size":3173,"mtime":1615472892000,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"153vt",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\index.js",[],["74","75"],"C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\App.js",[],"C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\reportWebVitals.js",[],"C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\Threat.js",["76"],"C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\Home.js",[],"C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\Threat_chart.js",["77","78","79","80","81","82","83","84","85","86","87","88","89","90"],"import React, {Component} from 'react';\r\nimport ccodes from  '../datasets/COW country codes.csv';\r\nimport MIDB from '../datasets/MIDB 5.0.csv';\r\nimport mil from  '../datasets/Military_expenditure.csv';\r\nimport allyDB from '../datasets/alliance_v4.1_by_member.csv';\r\nimport * as d3 from \"d3\";\r\n\r\nclass Threat_chart extends Component{\r\n\r\n    componentDidMount(){\r\n        this.drawChart();\r\n    }\r\n\r\n    drawChart(){\r\n      // load json file for the map\r\n      const topojson_countries = require('../datasets/countries-110m.json');\r\n      \r\n      const topojson = require(\"topojson\");\r\n      const countries_objects = topojson.feature(topojson_countries, topojson_countries.objects.countries);\r\n      const countries = topojson.feature(topojson_countries, topojson_countries.objects.countries).features;\r\n      const mesh_countries = topojson.mesh(topojson_countries, topojson_countries.objects.countries, function(a, b) { return a !== b; });\r\n\r\n      // size of view box\r\n      const dimensions = ({\r\n        width: 600,\r\n        height: 400,\r\n        margin: 50,\r\n      })\r\n\r\n      // map color\r\n      const colors = ({\r\n        stroke_color: \"white\",\r\n        active_color: \"#2c4566\",\r\n        inactive_color: \"#9daabd\",\r\n        background_color: \"#e4e9f0\",\r\n        tooltip_color: \"#21334f\",\r\n        tooltip_background: \"rgba(237, 244, 255, 0.7)\"\r\n      })\r\n\r\n      // packed circle color\r\n      const cc_colors = [\"#004ecc\", \"#c90000\", \"#c7c9ff\", \"#ffa8a8\"]  // friendly, hostile, friedly_background, hostile_background\r\n\r\n      // size\r\n      const size = ({\r\n        width: 300,\r\n        height: 200\r\n      })\r\n\r\n      // Visualize world map\r\n      var svg = d3.select('#container')\r\n        .append('svg')\r\n          .attr(\"viewBox\", [0, 0, dimensions.width, dimensions.height])\r\n          .attr(\"class\", \"globe\")\r\n          .on(\"click\", reset);\r\n\r\n      svg.append(\"rect\")\r\n        .attr(\"width\", dimensions.width)\r\n        .attr(\"height\", dimensions.height)\r\n        .attr(\"fill\", colors.background_color);\r\n\r\n      var projectionMercator = d3.geoEquirectangular()\r\n                                .translate([dimensions.width / 2, dimensions.height / 2])\r\n                                .rotate([0, 0])\r\n                                .fitSize([dimensions.width, dimensions.height], countries_objects);\r\n                                  // note: use topojson objects (w/ type: FeatureCollection) to fitsize\r\n      \r\n      var geoMercator = d3.geoMercator()\r\n                          .center([0, 0])\r\n                          .fitSize([dimensions.width, dimensions.height], countries);\r\n\r\n      var path = d3.geoPath()\r\n                    .projection(projectionMercator);\r\n      \r\n      const zoom = d3.zoom()\r\n                      .scaleExtent([1, 10])\r\n                      .on(\"zoom\", zoomed);\r\n    \r\n      var g = svg.append(\"g\");\r\n\r\n      var tooltip = d3.select(\"body\").append(\"div\")\r\n        .attr(\"class\", \"tooltip\")\r\n    \r\n      g.selectAll(\"path\")\r\n        .data(countries)\r\n        .enter().append(\"path\")\r\n        .attr(\"d\", path)\r\n        .style(\"fill\", colors.inactive_color)\r\n        .attr(\"class\", \"country\")\r\n        .on(\"click\", clicked)\r\n        .on('mouseenter', function(event, d) { \r\n          d3.select(this)\r\n            .transition()\r\n            .delay(100)\r\n            .style(\"fill\", colors.active_color);\r\n          tooltip.html(\r\n              `<div><strong> ${d.properties.name}</strong></div>`)\r\n                .style('visibility', 'visible');\r\n        })\r\n        .on('mouseleave', function(d) { \r\n          d3.select(this)\r\n            .transition()\r\n            .delay(100)\r\n            .style(\"fill\", colors.inactive_color);\r\n          tooltip.html(``).style('visibility', 'hidden');\r\n        })     \r\n        .on('mousemove', function (event, d) {\r\n              tooltip\r\n                .style('top', event.pageY - 10 + 'px')\r\n                .style('left', event.pageX + 10 + 'px');\r\n        });\r\n      \r\n        g.append(\"path\")\r\n          .data(mesh_countries)\r\n          .attr(\"class\", \"mesh\")\r\n          .attr('stroke-linejoin', 'round')\r\n          .style(\"stroke\", colors.stroke_color)\r\n          .style(\"stroke-width\", \"1px\")\r\n          .attr(\"d\", path);\r\n    \r\n      svg.call(zoom);\r\n\r\n      function clicked(event, d) {\r\n        const [[x0, y0], [x1, y1]] = path.bounds(d);\r\n        event.stopPropagation();\r\n\r\n        //remove previous circles\r\n        d3.selectAll(\"circle\").remove();\r\n\r\n        var ccode = 0\r\n        var found = false\r\n\r\n        svg.transition().duration(750).call(\r\n          zoom.transform,\r\n          d3.zoomIdentity\r\n            .translate(dimensions.width / 2, dimensions.height / 2)\r\n            .scale(Math.min(3, 0.9 / Math.max((x1 - x0) / dimensions.width, (y1 - y0) / dimensions.height)))\r\n            .translate(-(x0 + x1) / 2, -(y0 + y1) / 2),\r\n        );\r\n\r\n        /// start preprocessing ///\r\n        // load ccodes data\r\n        d3.csv(ccodes)\r\n          .then(csv => {\r\n            var codemap_dup = csv.map(row => {\r\n              return {\r\n                name: String(row['StateNme']),\r\n                code: String(row['CCode'])\r\n              }\r\n              })\r\n            \r\n            // remove duplicate codes\r\n            var codemap = codemap_dup.reduce((unique, o) => {\r\n              if(!unique.some(obj => obj.name === o.name && obj.code === o.code)) {\r\n                unique.push(o);\r\n              }\r\n              return unique;\r\n            },[]);\r\n\r\n            // find ccode of selected\r\n            codemap.forEach(country =>{\r\n              if (country.name === d.properties.name) {\r\n                found = true\r\n                ccode = country.code\r\n              }\r\n            })\r\n            if (found){\r\n              // search dispute dataset\r\n              d3.csv(MIDB)\r\n                .then(csv =>{\r\n\r\n                  // select meaningful columns\r\n                  var disputes = csv.map(row => {\r\n                    return {\r\n                      dispnum: Number(row['dispnum']),\r\n                      ccode: Number(row['ccode']),\r\n                      styear: Number(row['styear'])\r\n                    }\r\n                  })\r\n\r\n                  // get disputes of the selected country\r\n                  var sel_disp = []                  \r\n\r\n                  disputes.forEach(disp => {\r\n                    if (disp.ccode == ccode && disp.styear > 1990){   // filter disputes after 1990\r\n                      sel_disp.push(disp.dispnum)\r\n                    }\r\n                  })\r\n\r\n                  // get ccodes of hostile countries\r\n                  var threats = new Set()\r\n                  disputes.forEach(disp =>{\r\n                    if (sel_disp.includes(disp.dispnum) && disp.ccode != ccode){\r\n                      threats.add(disp.ccode)\r\n                    }\r\n                  })\r\n\r\n                  // get military expenditure of selected country and threats\r\n                  d3.csv(mil)\r\n                    .then(csv => {             \r\n                      // create data by selecting two columns from csv \r\n                      var entire_mil_exp = csv.map(row => {\r\n                        return {\r\n                          name: String(row['Name']),\r\n                          mil: Number(row['2018'])\r\n                        }\r\n                      })\r\n\r\n                      var formattedData = []\r\n                      // add the selected county itself to formatted data\r\n                      codemap.forEach(cd => {\r\n                        if (ccode == cd.code){\r\n                          // get military expenditure\r\n                          entire_mil_exp.forEach(dat =>{\r\n                            if (dat.name == cd.name) {\r\n                              // add item to chart data\r\n                              formattedData.push({\r\n                                threat: 0,   // not threat, that is, friendly\r\n                                value: dat.mil,\r\n                                name: cd.name\r\n                              })  \r\n                            }\r\n                          })\r\n                        }\r\n                      })\r\n\r\n                      // search alliance dataset\r\n                      d3.csv(allyDB)\r\n                      .then(csv =>{\r\n                        // select meaningful columns\r\n                        var allianceDB_raw = csv.map(row => {\r\n                          return {\r\n                            allyID: Number(row['version4id']),\r\n                            ccode: Number(row['ccode']),\r\n                            styear: Number(row['all_st_year']),\r\n                            type: String(row['ss_type']),\r\n                            endyear: Number(row['all_end_year'])\r\n                          }\r\n                        });\r\n\r\n                        function filter_effective(array) {\r\n                          var effectives = array.filter(alliance => alliance.endyear == \"\")\r\n                          var mutual_defense = effectives.filter(alliance => alliance.type == \"Type I: Defense Pact\" || alliance.type == \"Type III: Entente\")\r\n                          return mutual_defense;\r\n                          }\r\n                        \r\n                        // filter still effective and about mutual defense alliances\r\n                        var allianceDB_dup = filter_effective(allianceDB_raw);\r\n                        \r\n                        // remove duplicate data\r\n                        var allianceDB = allianceDB_dup.reduce((unique, o) => {\r\n                          if(!unique.some(obj => obj.allyID === o.allyID && obj.ccode === o.ccode)) {\r\n                            unique.push(o);\r\n                          }\r\n                          return unique;\r\n                        },[]);\r\n\r\n                        console.log(allianceDB)\r\n                        \r\n                        // get alliances of selected country\r\n                        var sel_alli = [];\r\n\r\n                        allianceDB.forEach(alli => {\r\n                          if (alli.ccode == ccode){\r\n                            sel_alli.push(alli.allyID)\r\n                          }\r\n                        })\r\n\r\n                        console.log(sel_alli)\r\n\r\n                        // get ccode of allied countries\r\n                        var alliances = new Set();\r\n                        allianceDB.forEach(alli => {\r\n                          if (sel_alli.includes(alli.allyID) && alli.ccode != ccode){\r\n                            alliances.add(alli.ccode)\r\n                          }  \r\n                        })\r\n\r\n                        console.log(alliances)\r\n\r\n                        var alli_list = []\r\n                        // for each allied country\r\n                        alliances.forEach(country =>{\r\n                          // map ccode to name\r\n                          codemap.forEach(cd => {\r\n                            if (country == cd.code){\r\n                              // get name\r\n                              entire_mil_exp.forEach(dat =>{\r\n                                if (dat.name == cd.name) {\r\n                                  // add item to allies\r\n                                  alli_list.push({\r\n                                    threat: 0,\r\n                                    name: cd.name\r\n                                  })  \r\n                                }\r\n                              })\r\n                            }\r\n                          })\r\n                        })  \r\n\r\n                        console.log(alli_list)\r\n                        // for each threat country\r\n                        threats.forEach(country =>{                        \r\n                          // map ccode to name\r\n                          codemap.forEach(cd => {\r\n                            if (country == cd.code){\r\n                              // get military expenditure\r\n                              entire_mil_exp.forEach(dat =>{\r\n                                var hostile = true \r\n                                alli_list.forEach(friendly => {\r\n                                  // don't add friendly countries to threats\r\n                                  if (Object.values(friendly).includes(dat.name)){ \r\n                                    hostile = false\r\n                                  }\r\n                                })\r\n                                if (dat.name == cd.name && hostile) {\r\n                                  // add item to formatted data\r\n                                  formattedData.push({\r\n                                    threat: 1,\r\n                                    value: dat.mil,\r\n                                    name: cd.name\r\n                                  })  \r\n                                }\r\n                              })\r\n                            }\r\n                          })\r\n                        })\r\n\r\n                        // convert to chart data format\r\n                        var chartData = ({\r\n                          children: Array.from(\r\n                            d3.group(\r\n                              formattedData,\r\n                              d => d.threat\r\n                            ),\r\n                            ([, children]) => ({children})\r\n                          )\r\n                        })\r\n\r\n                        // pack data\r\n                        const root = d3.pack()\r\n                          .size([size.width, size.height])\r\n                          .padding(1)\r\n                        (d3.hierarchy(chartData)\r\n                          .sum(d => d.value))\r\n                                            \r\n                        // draw background circles\r\n                        svg.append(\"g\")\r\n                            .attr(\"stroke\", \"#ccc\")\r\n                          .selectAll(\"circle\")\r\n                          .data(root.descendants().filter(d => d.height === 1))\r\n                          .join(\"circle\")\r\n                            .attr(\"cx\", d => d.x)\r\n                            .attr(\"cy\", d => d.y)\r\n                            .attr(\"r\", d => d.r)\r\n                            .attr(\"fill\", d => cc_colors[d.data.children[0].threat+2]);\r\n\r\n                        // put packed circles\r\n                        svg.append(\"g\")\r\n                          .selectAll(\"circle\")\r\n                          .data(root.leaves())\r\n                          .join(\"circle\")\r\n                            .attr(\"cx\", d => d.x)\r\n                            .attr(\"cy\", d => d.y)\r\n                            .attr(\"r\", d => d.r)\r\n                            .attr(\"fill\", d => cc_colors[d.data.threat])\r\n                          .append(\"title\")\r\n                            .text(d => `${d.data.name} \\n${d.data.value.toLocaleString('en-US', {\r\n                              style: 'currency',\r\n                              currency: 'USD',\r\n                              minimumFractionDigits: 0,\r\n                              maximumFractionDigits: 0\r\n                            })}`)         \r\n\r\n                        console.log(root.descendants())\r\n\r\n                        console.log(chartData)\r\n                      })\r\n                    })\r\n                })\r\n            } else {\r\n              // print No data\r\n            }\r\n          })\r\n      }\r\n      \r\n      function reset() {\r\n        svg.transition().duration(750).call(\r\n          zoom.transform,\r\n          d3.zoomIdentity,\r\n          d3.zoomTransform(svg.node()).invert([dimensions.width / 2, dimensions.height / 2])\r\n        );\r\n        \r\n        //remove previous circles\r\n        d3.selectAll(\"circle\").remove();\r\n      }\r\n      \r\n      function zoomed(event) {\r\n        const {transform} = event;\r\n        g.attr(\"transform\", transform);\r\n        g.attr(\"stroke-width\", 1 / transform.k);\r\n      }\r\n    }\r\n\r\n    render(){\r\n        return <div id={\"#\" + this.props.id}></div>\r\n    }\r\n}\r\n\r\nexport default Threat_chart;","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\components\\Header.js",[],"C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\Alliance.js",["91"],"C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\Alliance_chart.js",["92","93","94","95","96","97","98","99","100","101","102","103","104","105"],"import React, {Component} from 'react';\r\nimport ccodes from  '../datasets/COW country codes.csv';\r\nimport MIDB from '../datasets/MIDB 5.0.csv';\r\nimport mil from  '../datasets/Military_expenditure.csv';\r\nimport allyDB from '../datasets/alliance_v4.1_by_member.csv';\r\nimport * as d3 from \"d3\";\r\n\r\nclass Alliance_chart extends Component{\r\n\r\n    componentDidMount(){\r\n        this.drawChart();\r\n    }\r\n\r\n    drawChart(){\r\n      // load json file for the map\r\n      const topojson_countries = require('../datasets/countries-110m.json');\r\n      \r\n      const topojson = require(\"topojson\");\r\n      const countries_objects = topojson.feature(topojson_countries, topojson_countries.objects.countries);\r\n      const countries = topojson.feature(topojson_countries, topojson_countries.objects.countries).features;\r\n      const mesh_countries = topojson.mesh(topojson_countries, topojson_countries.objects.countries, function(a, b) { return a !== b; });\r\n\r\n      // size of view box\r\n      const dimensions = ({\r\n        width: 600,\r\n        height: 400,\r\n        margin: 50,\r\n      })\r\n\r\n      // map color\r\n      const colors = ({\r\n        stroke_color: \"white\",\r\n        active_color: \"#2c4566\",\r\n        inactive_color: \"#9daabd\",\r\n        background_color: \"#e4e9f0\",\r\n        tooltip_color: \"#21334f\",\r\n        tooltip_background: \"rgba(237, 244, 255, 0.7)\"\r\n      })\r\n\r\n      // packed circle color\r\n      const cc_colors = [\"#004ecc\", \"#c90000\", \"#c7c9ff\", \"#ffa8a8\"]  // friendly, hostile, friedly_background, hostile_background\r\n\r\n      // size\r\n      const size = ({\r\n        width: 300,\r\n        height: 200\r\n      })\r\n\r\n      // Visualize world map\r\n      var svg = d3.select('#container')\r\n        .append('svg')\r\n          .attr(\"viewBox\", [0, 0, dimensions.width, dimensions.height])\r\n          .attr(\"class\", \"globe\")\r\n          .on(\"click\", reset);\r\n\r\n      svg.append(\"rect\")\r\n        .attr(\"width\", dimensions.width)\r\n        .attr(\"height\", dimensions.height)\r\n        .attr(\"fill\", colors.background_color);\r\n\r\n      var projectionMercator = d3.geoEquirectangular()\r\n                                .translate([dimensions.width / 2, dimensions.height / 2])\r\n                                .rotate([0, 0])\r\n                                .fitSize([dimensions.width, dimensions.height], countries_objects);\r\n                                  // note: use topojson objects (w/ type: FeatureCollection) to fitsize\r\n      \r\n      var geoMercator = d3.geoMercator()\r\n                          .center([0, 0])\r\n                          .fitSize([dimensions.width, dimensions.height], countries);\r\n\r\n      var path = d3.geoPath()\r\n                    .projection(projectionMercator);\r\n      \r\n      const zoom = d3.zoom()\r\n                      .scaleExtent([1, 10])\r\n                      .on(\"zoom\", zoomed);\r\n    \r\n      var g = svg.append(\"g\");\r\n\r\n      var tooltip = d3.select(\"body\").append(\"div\")\r\n        .attr(\"class\", \"tooltip\")\r\n    \r\n      g.selectAll(\"path\")\r\n        .data(countries)\r\n        .enter().append(\"path\")\r\n        .attr(\"d\", path)\r\n        .style(\"fill\", colors.inactive_color)\r\n        .attr(\"class\", \"country\")\r\n        .on(\"click\", clicked)\r\n        .on('mouseenter', function(event, d) { \r\n          d3.select(this)\r\n            .transition()\r\n            .delay(100)\r\n            .style(\"fill\", colors.active_color);\r\n          tooltip.html(\r\n              `<div><strong> ${d.properties.name}</strong></div>`)\r\n                .style('visibility', 'visible');\r\n        })\r\n        .on('mouseleave', function(d) { \r\n          d3.select(this)\r\n            .transition()\r\n            .delay(100)\r\n            .style(\"fill\", colors.inactive_color);\r\n          tooltip.html(``).style('visibility', 'hidden');\r\n        })     \r\n        .on('mousemove', function (event, d) {\r\n              tooltip\r\n                .style('top', event.pageY - 10 + 'px')\r\n                .style('left', event.pageX + 10 + 'px');\r\n        });\r\n      \r\n        g.append(\"path\")\r\n          .data(mesh_countries)\r\n          .attr(\"class\", \"mesh\")\r\n          .attr('stroke-linejoin', 'round')\r\n          .style(\"stroke\", colors.stroke_color)\r\n          .style(\"stroke-width\", \"1px\")\r\n          .attr(\"d\", path);\r\n    \r\n      svg.call(zoom);\r\n\r\n      function clicked(event, d) {\r\n        const [[x0, y0], [x1, y1]] = path.bounds(d);\r\n        event.stopPropagation();\r\n\r\n        //remove previous circles\r\n        d3.selectAll(\"circle\").remove();\r\n\r\n        var ccode = 0\r\n        var found = false\r\n\r\n        svg.transition().duration(750).call(\r\n          zoom.transform,\r\n          d3.zoomIdentity\r\n            .translate(dimensions.width / 2, dimensions.height / 2)\r\n            .scale(Math.min(3, 0.9 / Math.max((x1 - x0) / dimensions.width, (y1 - y0) / dimensions.height)))\r\n            .translate(-(x0 + x1) / 2, -(y0 + y1) / 2),\r\n        );\r\n\r\n        /// start preprocessing ///\r\n        // load ccodes data\r\n        d3.csv(ccodes)\r\n          .then(csv => {\r\n            var codemap_dup = csv.map(row => {\r\n              return {\r\n                name: String(row['StateNme']),\r\n                code: String(row['CCode'])\r\n              }\r\n              })\r\n            \r\n            // remove duplicate codes\r\n            var codemap = codemap_dup.reduce((unique, o) => {\r\n              if(!unique.some(obj => obj.name === o.name && obj.code === o.code)) {\r\n                unique.push(o);\r\n              }\r\n              return unique;\r\n            },[]);\r\n\r\n            // find ccode of selected\r\n            codemap.forEach(country =>{\r\n              if (country.name === d.properties.name) {\r\n                found = true\r\n                ccode = country.code\r\n              }\r\n            })\r\n            if (found){\r\n              // search dispute dataset\r\n              d3.csv(MIDB)\r\n                .then(csv =>{\r\n\r\n                  // select meaningful columns\r\n                  var disputes = csv.map(row => {\r\n                    return {\r\n                      dispnum: Number(row['dispnum']),\r\n                      ccode: Number(row['ccode']),\r\n                      styear: Number(row['styear'])\r\n                    }\r\n                  })\r\n\r\n                  // get disputes of the selected country\r\n                  var sel_disp = []                  \r\n\r\n                  disputes.forEach(disp => {\r\n                    if (disp.ccode == ccode && disp.styear > 1990){   // filter disputes after 1990\r\n                      sel_disp.push(disp.dispnum)\r\n                    }\r\n                  })\r\n\r\n                  // get ccodes of hostile countries\r\n                  var threats = new Set()\r\n                  disputes.forEach(disp =>{\r\n                    if (sel_disp.includes(disp.dispnum) && disp.ccode != ccode){\r\n                      threats.add(disp.ccode)\r\n                    }\r\n                  })\r\n\r\n                  // get military expenditure of selected country and threats\r\n                  d3.csv(mil)\r\n                    .then(csv => {             \r\n                      // create data by selecting two columns from csv \r\n                      var entire_mil_exp = csv.map(row => {\r\n                        return {\r\n                          name: String(row['Name']),\r\n                          mil: Number(row['2018'])\r\n                        }\r\n                      })\r\n\r\n                      var formattedData = []\r\n                      // add the selected county itself to formatted data\r\n                      codemap.forEach(cd => {\r\n                        if (ccode == cd.code){\r\n                          // get military expenditure\r\n                          entire_mil_exp.forEach(dat =>{\r\n                            if (dat.name == cd.name) {\r\n                              // add item to chart data\r\n                              formattedData.push({\r\n                                threat: 0,   // not threat, that is, friendly\r\n                                value: dat.mil,\r\n                                name: cd.name\r\n                              })  \r\n                            }\r\n                          })\r\n                        }\r\n                      })\r\n\r\n                      // search alliance dataset\r\n                      d3.csv(allyDB)\r\n                      .then(csv =>{\r\n                        // select meaningful columns\r\n                        var allianceDB_raw = csv.map(row => {\r\n                          return {\r\n                            allyID: Number(row['version4id']),\r\n                            ccode: Number(row['ccode']),\r\n                            styear: Number(row['all_st_year']),\r\n                            type: String(row['ss_type']),\r\n                            endyear: Number(row['all_end_year'])\r\n                          }\r\n                        });\r\n\r\n                        function filter_effective(array) {\r\n                          var effectives = array.filter(alliance => alliance.endyear == \"\")\r\n                          var mutual_defense = effectives.filter(alliance => alliance.type == \"Type I: Defense Pact\" || alliance.type == \"Type III: Entente\")\r\n                          return mutual_defense;\r\n                          }\r\n                        \r\n                        // filter still effective and about mutual defense alliances\r\n                        var allianceDB_dup = filter_effective(allianceDB_raw);\r\n                        \r\n                        // remove duplicate data\r\n                        var allianceDB = allianceDB_dup.reduce((unique, o) => {\r\n                          if(!unique.some(obj => obj.allyID === o.allyID && obj.ccode === o.ccode)) {\r\n                            unique.push(o);\r\n                          }\r\n                          return unique;\r\n                        },[]);\r\n\r\n                        console.log(allianceDB)\r\n                        \r\n                        // get alliances of selected country\r\n                        var sel_alli = [];\r\n\r\n                        allianceDB.forEach(alli => {\r\n                          if (alli.ccode == ccode){\r\n                            sel_alli.push(alli.allyID)\r\n                          }\r\n                        })\r\n\r\n                        console.log(sel_alli)\r\n\r\n                        // get ccode of allied countries\r\n                        var alliances = new Set();\r\n                        allianceDB.forEach(alli => {\r\n                          if (sel_alli.includes(alli.allyID) && alli.ccode != ccode){\r\n                            alliances.add(alli.ccode)\r\n                          }  \r\n                        })\r\n\r\n                        console.log(alliances)\r\n\r\n                        // for each allied country\r\n                        alliances.forEach(country =>{\r\n                          // map ccode to name\r\n                          codemap.forEach(cd => {\r\n                            if (country == cd.code){\r\n                              // get military expenditure\r\n                              entire_mil_exp.forEach(dat =>{\r\n                                if (dat.name == cd.name) {\r\n                                  // add item to formatted data\r\n                                  formattedData.push({\r\n                                    threat: 0,\r\n                                    value: dat.mil,\r\n                                    name: cd.name\r\n                                  })  \r\n                                }\r\n                              })\r\n                            }\r\n                          })\r\n                        })  \r\n\r\n                        // for each threat country\r\n                        threats.forEach(country =>{                        \r\n                          // map ccode to name\r\n                          codemap.forEach(cd => {\r\n                            if (country == cd.code){\r\n                              // get military expenditure\r\n                              entire_mil_exp.forEach(dat =>{\r\n                                var hostile = true \r\n                                formattedData.forEach(friendly => {\r\n                                  // don't add friendly countries to threats\r\n                                  if (Object.values(friendly).includes(dat.name)){ \r\n                                    hostile = false\r\n                                  }\r\n                                })\r\n                                if (dat.name == cd.name && hostile) {\r\n                                  // add item to formatted data\r\n                                  formattedData.push({\r\n                                    threat: 1,\r\n                                    value: dat.mil,\r\n                                    name: cd.name\r\n                                  })  \r\n                                }\r\n                              })\r\n                            }\r\n                          })\r\n                        })\r\n\r\n                        // convert to chart data format\r\n                        var chartData = ({\r\n                          children: Array.from(\r\n                            d3.group(\r\n                              formattedData,\r\n                              d => d.threat\r\n                            ),\r\n                            ([, children]) => ({children})\r\n                          )\r\n                        })\r\n\r\n                        // pack data\r\n                        const root = d3.pack()\r\n                          .size([size.width, size.height])\r\n                          .padding(1)\r\n                        (d3.hierarchy(chartData)\r\n                          .sum(d => d.value))\r\n                                            \r\n                        // draw background circles\r\n                        svg.append(\"g\")\r\n                            .attr(\"stroke\", \"#ccc\")\r\n                          .selectAll(\"circle\")\r\n                          .data(root.descendants().filter(d => d.height === 1))\r\n                          .join(\"circle\")\r\n                            .attr(\"cx\", d => d.x)\r\n                            .attr(\"cy\", d => d.y)\r\n                            .attr(\"r\", d => d.r)\r\n                            .attr(\"fill\", d => cc_colors[d.data.children[0].threat+2]);\r\n\r\n                        // put packed circles\r\n                        svg.append(\"g\")\r\n                          .selectAll(\"circle\")\r\n                          .data(root.leaves())\r\n                          .join(\"circle\")\r\n                            .attr(\"cx\", d => d.x)\r\n                            .attr(\"cy\", d => d.y)\r\n                            .attr(\"r\", d => d.r)\r\n                            .attr(\"fill\", d => cc_colors[d.data.threat])\r\n                          .append(\"title\")\r\n                            .text(d => `${d.data.name} \\n${d.data.value.toLocaleString('en-US', {\r\n                              style: 'currency',\r\n                              currency: 'USD',\r\n                              minimumFractionDigits: 0,\r\n                              maximumFractionDigits: 0\r\n                            })}`) \r\n\r\n                        console.log(chartData)                      \r\n                      });\r\n                    })\r\n                })\r\n            } else {\r\n              // print No data\r\n            }\r\n          })\r\n      }\r\n      \r\n      function reset() {\r\n        svg.transition().duration(750).call(\r\n          zoom.transform,\r\n          d3.zoomIdentity,\r\n          d3.zoomTransform(svg.node()).invert([dimensions.width / 2, dimensions.height / 2])\r\n        );\r\n        \r\n        //remove previous circles\r\n        d3.selectAll(\"circle\").remove();\r\n      }\r\n      \r\n      function zoomed(event) {\r\n        const {transform} = event;\r\n        g.attr(\"transform\", transform);\r\n        g.attr(\"stroke-width\", 1 / transform.k);\r\n      }\r\n    }\r\n\r\n    render(){\r\n        return <div id={\"#\" + this.props.id}></div>\r\n    }\r\n}\r\n\r\nexport default Alliance_chart;","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\Total_alliance.js",["106"],"C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\Total_alliance_chart.js",["107","108","109","110","111","112","113","114"],"import React, {Component} from 'react';\r\nimport ccodes from  '../datasets/COW country codes.csv';\r\nimport mil from  '../datasets/Military_expenditure.csv';\r\nimport allyDB from '../datasets/alliance_v4.1_by_member.csv';\r\nimport * as d3 from \"d3\";\r\n\r\nclass Total_alliance_chart extends Component{\r\n\r\n    componentDidMount(){\r\n        this.drawChart();\r\n    }\r\n\r\n    drawChart(){\r\n      // load ccodes data\r\n      d3.csv(ccodes)\r\n      .then(csv => {\r\n        var codemap_dup = csv.map(row => {\r\n          return {\r\n            name: String(row['StateNme']),\r\n            code: String(row['CCode'])\r\n          }\r\n          })\r\n        \r\n        // remove duplicate codes\r\n        var codemap = codemap_dup.reduce((unique, o) => {\r\n          if(!unique.some(obj => obj.name === o.name && obj.code === o.code)) {\r\n            unique.push(o);\r\n          }\r\n          return unique;\r\n        },[]);\r\n\r\n        // load military expenditure dataset\r\n        d3.csv(mil)\r\n        .then(csv => {             \r\n          // create data by selecting two columns from csv \r\n          var entire_mil_exp = csv.map(row => {\r\n            return {\r\n              name: String(row['Name']),\r\n              mil: Number(row['2018'])\r\n            }\r\n          })\r\n\r\n          // load alliance dataset\r\n          d3.csv(allyDB)\r\n          .then(csv =>{\r\n            // select meaningful columns\r\n            var allianceDB_raw = csv.map(row => {\r\n              return {\r\n                allyID: Number(row['version4id']),\r\n                ccode: Number(row['ccode']),\r\n                styear: Number(row['all_st_year']),\r\n                type: String(row['ss_type']),\r\n                endyear: Number(row['all_end_year'])\r\n              }\r\n            });\r\n\r\n            function filter_effective(array) {\r\n              var effectives = array.filter(alliance => alliance.endyear == \"\")\r\n              var mutual_defense = effectives.filter(alliance => alliance.type == \"Type I: Defense Pact\" || alliance.type == \"Type III: Entente\")\r\n              return mutual_defense;\r\n              }\r\n            \r\n            // filter still effective and about mutual defense alliances\r\n            var allianceDB_dup = filter_effective(allianceDB_raw);\r\n\r\n            // remove duplicate data\r\n            var allianceDB = allianceDB_dup.reduce((unique, o) => {\r\n              if(!unique.some(obj => obj.allyID === o.allyID && obj.ccode === o.ccode)) {\r\n                unique.push(o);\r\n              }\r\n              return unique;\r\n            },[]);\r\n\r\n            console.log(allianceDB)\r\n\r\n            // get list of alliances\r\n            var allianceList = new Set()\r\n            allianceDB.forEach(alli => {\r\n              allianceList.add(alli.allyID)\r\n            })\r\n\r\n            console.log(allianceList)\r\n\r\n            var chartData = {\r\n              name: \"Global Cooperations\",\r\n              children: []\r\n            }\r\n\r\n            // for each alliance\r\n            allianceList.forEach(alli => {\r\n              var associated_countries = []\r\n              // find countries match that alliance\r\n              allianceDB.forEach(country => {\r\n                if(country.allyID == alli){\r\n                  codemap.forEach(cd =>{\r\n                    // translate ccode of each country\r\n                    if(country.ccode == cd.code){\r\n                      // get military expenditure\r\n                      entire_mil_exp.forEach(dat =>{\r\n                        if (dat.name == cd.name) {\r\n                          // add item to buffer\r\n                          associated_countries.push({\r\n                            name: cd.name,\r\n                            value: dat.mil\r\n                          }) \r\n                        }\r\n                      })\r\n                    }\r\n                  })\r\n                }\r\n              })\r\n              // if each alliance has information of at least two associated countries\r\n              if (associated_countries.length > 1){\r\n                // add item to chart data\r\n                chartData.children.push({name: \"\", children: associated_countries}) \r\n              }\r\n            })\r\n\r\n            // End of preprocessing\r\n            console.log(chartData)\r\n\r\n            // parameters for visualization\r\n\r\n            const dimensions = ({\r\n              width: 1500,\r\n              height: 1500,\r\n              margin: 50,\r\n            })\r\n\r\n            const format = d3.format(\",d\")\r\n\r\n            const color = d3.scaleLinear()\r\n            .domain([0, 3])\r\n            .range([\"hsl(220,90%,90%)\", \"hsl(230,50%,40%)\"])\r\n            .interpolate(d3.interpolateHcl)\r\n\r\n            // pack data\r\n            var root = d3.pack()\r\n              .size([dimensions.width, dimensions.height])\r\n              .padding(3)\r\n            (d3.hierarchy(chartData)\r\n              .sum(d => d.value))\r\n              .sort((a, b) => b.value - a.value)\r\n\r\n            // start visualize\r\n            var focus = root;\r\n            var view;\r\n\r\n            const svg = d3.select(\"#container\")\r\n                .append(\"svg\")\r\n                  .attr(\"viewBox\", `-${dimensions.width / 2} -${dimensions.height / 2} ${dimensions.width} ${dimensions.height}`)\r\n                  .style(\"display\", \"block\")\r\n                  .style(\"margin\", \"0 -14px\")\r\n                  .style(\"background\", color(0))\r\n                  .style(\"cursor\", \"pointer\")\r\n                  .on(\"click\", (event) => zoom(event, root));\r\n\r\n            const node = svg.append(\"g\")\r\n              .selectAll(\"circle\")\r\n              .data(root.descendants().slice(1))\r\n              .join(\"circle\")\r\n                .attr(\"fill\", d => d.children ? color(d.depth) : \"#000091\")\r\n                .attr(\"pointer-events\", d => !d.children ? \"none\" : null)\r\n                .on(\"mouseover\", function() { d3.select(this).attr(\"stroke\", \"#000\"); })\r\n                .on(\"mouseout\", function() { d3.select(this).attr(\"stroke\", null); })\r\n                .on(\"click\", (event, d) => focus !== d && (zoom(event, d), event.stopPropagation()));\r\n\r\n            const label = svg.append(\"g\")\r\n                .style(\"font\", \"20px sans-serif\")\r\n                .style(\"fill\", \"white\")\r\n                .attr(\"pointer-events\", \"none\")\r\n                .attr(\"text-anchor\", \"middle\")\r\n              .selectAll(\"text\")\r\n              .data(root.descendants())\r\n              .join(\"text\")\r\n                .style(\"fill-opacity\", d => d.parent === root ? 1 : 0)\r\n                .style(\"display\", d => d.parent === root ? \"inline\" : \"none\")\r\n                .text(d => d.data.name);\r\n\r\n            zoomTo([root.x, root.y, root.r * 2]);\r\n\r\n            function zoomTo(v) {\r\n              const k = dimensions.width / v[2];\r\n\r\n              view = v;\r\n\r\n              label.attr(\"transform\", d => `translate(${(d.x - v[0]) * k},${(d.y - v[1]) * k})`);\r\n              node.attr(\"transform\", d => `translate(${(d.x - v[0]) * k},${(d.y - v[1]) * k})`);\r\n              node.attr(\"r\", d => d.r * k);\r\n            }\r\n\r\n            function zoom(event, d) {\r\n              const focus0 = focus;\r\n\r\n              focus = d;\r\n\r\n              const transition = svg.transition()\r\n                  .duration(event.altKey ? 7500 : 750)\r\n                  .tween(\"zoom\", d => {\r\n                    const i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2]);\r\n                    return t => zoomTo(i(t));\r\n                  });\r\n\r\n              label\r\n                .filter(function(d) { return d.parent === focus || this.style.display === \"inline\"; })\r\n                .transition(transition)\r\n                  .style(\"fill-opacity\", d => d.parent === focus ? 1 : 0)\r\n                  .on(\"start\", function(d) { if (d.parent === focus) this.style.display = \"inline\"; })\r\n                  .on(\"end\", function(d) { if (d.parent !== focus) this.style.display = \"none\"; });\r\n            }\r\n\r\n\r\n          })\r\n        })\r\n      })\r\n    }\r\n\r\n    render(){\r\n        return <div id={\"#\" + this.props.id}></div>\r\n    }\r\n}\r\n\r\nexport default Total_alliance_chart;","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\GDP.js",["115"],"C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\Area.js",[],"C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\Area2.js",[],"C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\AreaChart.js",[],"C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\GDP_chart.js",[],"C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\routes\\AreaChart2.js",[],{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":24,"column":9,"nodeType":"122","endLine":24,"endColumn":24},{"ruleId":"123","severity":1,"message":"124","line":67,"column":11,"nodeType":"125","messageId":"126","endLine":67,"endColumn":22},{"ruleId":"127","severity":1,"message":"128","line":184,"column":36,"nodeType":"129","messageId":"130","endLine":184,"endColumn":38},{"ruleId":"127","severity":1,"message":"131","line":192,"column":71,"nodeType":"129","messageId":"130","endLine":192,"endColumn":73},{"ruleId":"127","severity":1,"message":"128","line":211,"column":35,"nodeType":"129","messageId":"130","endLine":211,"endColumn":37},{"ruleId":"127","severity":1,"message":"128","line":214,"column":42,"nodeType":"129","messageId":"130","endLine":214,"endColumn":44},{"ruleId":"127","severity":1,"message":"128","line":241,"column":86,"nodeType":"129","messageId":"130","endLine":241,"endColumn":88},{"ruleId":"127","severity":1,"message":"128","line":242,"column":92,"nodeType":"129","messageId":"130","endLine":242,"endColumn":94},{"ruleId":"127","severity":1,"message":"128","line":242,"column":135,"nodeType":"129","messageId":"130","endLine":242,"endColumn":137},{"ruleId":"127","severity":1,"message":"128","line":263,"column":42,"nodeType":"129","messageId":"130","endLine":263,"endColumn":44},{"ruleId":"127","severity":1,"message":"131","line":273,"column":76,"nodeType":"129","messageId":"130","endLine":273,"endColumn":78},{"ruleId":"127","severity":1,"message":"128","line":285,"column":41,"nodeType":"129","messageId":"130","endLine":285,"endColumn":43},{"ruleId":"127","severity":1,"message":"128","line":288,"column":46,"nodeType":"129","messageId":"130","endLine":288,"endColumn":48},{"ruleId":"127","severity":1,"message":"128","line":305,"column":41,"nodeType":"129","messageId":"130","endLine":305,"endColumn":43},{"ruleId":"127","severity":1,"message":"128","line":315,"column":46,"nodeType":"129","messageId":"130","endLine":315,"endColumn":48},{"ruleId":"120","severity":1,"message":"132","line":22,"column":9,"nodeType":"122","endLine":22,"endColumn":26},{"ruleId":"123","severity":1,"message":"124","line":67,"column":11,"nodeType":"125","messageId":"126","endLine":67,"endColumn":22},{"ruleId":"127","severity":1,"message":"128","line":184,"column":36,"nodeType":"129","messageId":"130","endLine":184,"endColumn":38},{"ruleId":"127","severity":1,"message":"131","line":192,"column":71,"nodeType":"129","messageId":"130","endLine":192,"endColumn":73},{"ruleId":"127","severity":1,"message":"128","line":211,"column":35,"nodeType":"129","messageId":"130","endLine":211,"endColumn":37},{"ruleId":"127","severity":1,"message":"128","line":214,"column":42,"nodeType":"129","messageId":"130","endLine":214,"endColumn":44},{"ruleId":"127","severity":1,"message":"128","line":241,"column":86,"nodeType":"129","messageId":"130","endLine":241,"endColumn":88},{"ruleId":"127","severity":1,"message":"128","line":242,"column":92,"nodeType":"129","messageId":"130","endLine":242,"endColumn":94},{"ruleId":"127","severity":1,"message":"128","line":242,"column":135,"nodeType":"129","messageId":"130","endLine":242,"endColumn":137},{"ruleId":"127","severity":1,"message":"128","line":263,"column":42,"nodeType":"129","messageId":"130","endLine":263,"endColumn":44},{"ruleId":"127","severity":1,"message":"131","line":273,"column":76,"nodeType":"129","messageId":"130","endLine":273,"endColumn":78},{"ruleId":"127","severity":1,"message":"128","line":284,"column":41,"nodeType":"129","messageId":"130","endLine":284,"endColumn":43},{"ruleId":"127","severity":1,"message":"128","line":287,"column":46,"nodeType":"129","messageId":"130","endLine":287,"endColumn":48},{"ruleId":"127","severity":1,"message":"128","line":304,"column":41,"nodeType":"129","messageId":"130","endLine":304,"endColumn":43},{"ruleId":"127","severity":1,"message":"128","line":314,"column":46,"nodeType":"129","messageId":"130","endLine":314,"endColumn":48},{"ruleId":"120","severity":1,"message":"133","line":22,"column":13,"nodeType":"122","endLine":22,"endColumn":36},{"ruleId":"127","severity":1,"message":"128","line":58,"column":74,"nodeType":"129","messageId":"130","endLine":58,"endColumn":76},{"ruleId":"127","severity":1,"message":"128","line":59,"column":80,"nodeType":"129","messageId":"130","endLine":59,"endColumn":82},{"ruleId":"127","severity":1,"message":"128","line":59,"column":123,"nodeType":"129","messageId":"130","endLine":59,"endColumn":125},{"ruleId":"127","severity":1,"message":"128","line":94,"column":35,"nodeType":"129","messageId":"130","endLine":94,"endColumn":37},{"ruleId":"127","severity":1,"message":"128","line":97,"column":38,"nodeType":"129","messageId":"130","endLine":97,"endColumn":40},{"ruleId":"127","severity":1,"message":"128","line":100,"column":38,"nodeType":"129","messageId":"130","endLine":100,"endColumn":40},{"ruleId":"123","severity":1,"message":"134","line":130,"column":19,"nodeType":"125","messageId":"126","endLine":130,"endColumn":25},{"ruleId":"123","severity":1,"message":"135","line":193,"column":21,"nodeType":"125","messageId":"126","endLine":193,"endColumn":27},{"ruleId":"120","severity":1,"message":"136","line":32,"column":9,"nodeType":"122","endLine":32,"endColumn":97},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"react/jsx-pascal-case","Imported JSX component Threat_chart must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","no-unused-vars","'geoMercator' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","Imported JSX component Alliance_chart must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Total_alliance_chart must be in PascalCase or SCREAMING_SNAKE_CASE","'format' is assigned a value but never used.","'focus0' is assigned a value but never used.","Imported JSX component GDP_chart must be in PascalCase or SCREAMING_SNAKE_CASE","no-global-assign","no-unsafe-negation"]