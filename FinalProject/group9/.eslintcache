[{"C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\index.js":"1","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\App.js":"2","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\reportWebVitals.js":"3","C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\Threats.js":"4"},{"size":517,"mtime":1614619732891,"results":"5","hashOfConfig":"6"},{"size":514,"mtime":1614669956594,"results":"7","hashOfConfig":"6"},{"size":375,"mtime":1614619732891,"results":"8","hashOfConfig":"6"},{"size":11612,"mtime":1614670061404,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"153vt",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\index.js",[],["20","21"],"C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\App.js",[],"C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\reportWebVitals.js",[],"C:\\Users\\pjin2\\Documents\\GitHub\\ECS272-Winter2021\\FinalProject\\group9\\src\\Threats.js",["22","23","24","25","26","27"],"import React, {Component} from 'react';\r\nimport ccodes from  './datasets/COW country codes.csv';\r\nimport MIDB from './datasets/MIDB 5.0.csv';\r\nimport mil from  './datasets/Military_expenditure.csv';\r\nimport * as d3 from \"d3\";\r\n\r\nclass Threats extends Component{\r\n\r\n    componentDidMount(){\r\n        this.drawChart();\r\n    }\r\n\r\n    drawChart(){\r\n      // load json file for the map\r\n      const topojson_countries = require('./datasets/countries-110m.json');\r\n      \r\n      const topojson = require(\"topojson\");\r\n      const countries_objects = topojson.feature(topojson_countries, topojson_countries.objects.countries);\r\n      const countries = topojson.feature(topojson_countries, topojson_countries.objects.countries).features;\r\n      const mesh_countries = topojson.mesh(topojson_countries, topojson_countries.objects.countries, function(a, b) { return a !== b; });\r\n\r\n      // size of view box\r\n      const dimensions = ({\r\n        width: 600,\r\n        height: 400,\r\n        margin: 50,\r\n      })\r\n\r\n      // map color\r\n      const colors = ({\r\n        stroke_color: \"white\",\r\n        active_color: \"#2c4566\",\r\n        inactive_color: \"#9daabd\",\r\n        background_color: \"#e4e9f0\",\r\n        tooltip_color: \"#21334f\",\r\n        tooltip_background: \"rgba(237, 244, 255, 0.7)\"\r\n      })\r\n\r\n      // packed circle color\r\n      const cc_colors = [\"#004ecc\", \"#c90000\", \"#c7c9ff\", \"#ffa8a8\"]  // friendly, hostile, friedly_background, hostile_background\r\n\r\n      // size\r\n      const size = ({\r\n        width: 300,\r\n        height: 200\r\n      })\r\n\r\n      // Visualize world map\r\n      var svg = d3.select('#container')\r\n        .append('svg')\r\n          .attr(\"viewBox\", [0, 0, dimensions.width, dimensions.height])\r\n          .attr(\"class\", \"globe\")\r\n          .on(\"click\", reset);\r\n\r\n      svg.append(\"rect\")\r\n        .attr(\"width\", dimensions.width)\r\n        .attr(\"height\", dimensions.height)\r\n        .attr(\"fill\", colors.background_color);\r\n\r\n      var projectionMercator = d3.geoEquirectangular()\r\n                                .translate([dimensions.width / 2, dimensions.height / 2])\r\n                                .rotate([0, 0])\r\n                                .fitSize([dimensions.width, dimensions.height], countries_objects);\r\n                                  // note: use topojson objects (w/ type: FeatureCollection) to fitsize\r\n      \r\n      var geoMercator = d3.geoMercator()\r\n                          .center([0, 0])\r\n                          .fitSize([dimensions.width, dimensions.height], countries);\r\n\r\n      var path = d3.geoPath()\r\n                    .projection(projectionMercator);\r\n      \r\n      const zoom = d3.zoom()\r\n                      .scaleExtent([1, 10])\r\n                      .on(\"zoom\", zoomed);\r\n    \r\n      var g = svg.append(\"g\");\r\n\r\n      var tooltip = d3.select(\"body\").append(\"div\")\r\n        .attr(\"class\", \"tooltip\")\r\n    \r\n      g.selectAll(\"path\")\r\n        .data(countries)\r\n        .enter().append(\"path\")\r\n        .attr(\"d\", path)\r\n        .style(\"fill\", colors.inactive_color)\r\n        .attr(\"class\", \"country\")\r\n        .on(\"click\", clicked)\r\n        .on('mouseenter', function(event, d) { \r\n          d3.select(this)\r\n            .transition()\r\n            .delay(100)\r\n            .style(\"fill\", colors.active_color);\r\n          tooltip.html(\r\n              `<div><strong> ${d.properties.name}</strong></div>`)\r\n                .style('visibility', 'visible');\r\n        })\r\n        .on('mouseleave', function(d) { \r\n          d3.select(this)\r\n            .transition()\r\n            .delay(100)\r\n            .style(\"fill\", colors.inactive_color);\r\n          tooltip.html(``).style('visibility', 'hidden');\r\n        })     \r\n        .on('mousemove', function (event, d) {\r\n              tooltip\r\n                .style('top', event.pageY - 10 + 'px')\r\n                .style('left', event.pageX + 10 + 'px');\r\n        });\r\n      \r\n        g.append(\"path\")\r\n          .data(mesh_countries)\r\n          .attr(\"class\", \"mesh\")\r\n          .attr('stroke-linejoin', 'round')\r\n          .style(\"stroke\", colors.stroke_color)\r\n          .style(\"stroke-width\", \"1px\")\r\n          .attr(\"d\", path);\r\n    \r\n      svg.call(zoom);\r\n\r\n      function clicked(event, d) {\r\n        const [[x0, y0], [x1, y1]] = path.bounds(d);\r\n        event.stopPropagation();\r\n\r\n        //remove previous circles\r\n        d3.selectAll(\"circle\").remove();\r\n\r\n        var ccode = 0\r\n        var found = false\r\n\r\n        svg.transition().duration(750).call(\r\n          zoom.transform,\r\n          d3.zoomIdentity\r\n            .translate(dimensions.width / 2, dimensions.height / 2)\r\n            .scale(Math.min(3, 0.9 / Math.max((x1 - x0) / dimensions.width, (y1 - y0) / dimensions.height)))\r\n            .translate(-(x0 + x1) / 2, -(y0 + y1) / 2),\r\n        );\r\n\r\n        /// start preprocessing ///\r\n        // load ccodes data\r\n        d3.csv(ccodes)\r\n          .then(csv => {\r\n            var codemap_dup = csv.map(row => {\r\n              return {\r\n                name: String(row['StateNme']),\r\n                code: String(row['CCode'])\r\n              }\r\n              })\r\n            \r\n            // remove duplicate codes\r\n            var codemap = codemap_dup.reduce((unique, o) => {\r\n              if(!unique.some(obj => obj.name === o.name && obj.code === o.code)) {\r\n                unique.push(o);\r\n              }\r\n              return unique;\r\n            },[]);\r\n\r\n            // find ccode of selected\r\n            codemap.forEach(country =>{\r\n              if (country.name === d.properties.name) {\r\n                found = true\r\n                ccode = country.code\r\n              }\r\n            })\r\n            if (found){\r\n              // search dispute dataset\r\n              d3.csv(MIDB)\r\n                .then(csv =>{\r\n\r\n                  // select meaningful columns\r\n                  var disputes = csv.map(row => {\r\n                    return {\r\n                      dispnum: Number(row['dispnum']),\r\n                      ccode: Number(row['ccode']),\r\n                      styear: Number(row['styear'])\r\n                    }\r\n                  })\r\n\r\n                  // get disputes of the selected country\r\n                  var sel_disp = []                  \r\n\r\n                  disputes.forEach(disp => {\r\n                    if (disp.ccode == ccode & disp.styear > 1990){   // filter disputes after 1990\r\n                      sel_disp.push(disp.dispnum)\r\n                    }\r\n                  })\r\n\r\n                  // get ccodes of hostile countries\r\n                  var threats = new Set()\r\n                  disputes.forEach(disp =>{\r\n                    if (disp.dispnum in sel_disp){\r\n                      threats.add(disp.ccode)\r\n                    }\r\n                  })\r\n\r\n                  // get military expenditure of selected country and threats\r\n                  d3.csv(mil)\r\n                    .then(csv => {             \r\n                      // create data by selecting two columns from csv \r\n                      var entire_mil_exp = csv.map(row => {\r\n                        return {\r\n                          name: String(row['Name']),\r\n                          mil: Number(row['2018'])\r\n                        }\r\n                      })\r\n\r\n                      var formattedData = []\r\n                      // add the selected county itself to formatted data\r\n                      codemap.forEach(cd => {\r\n                        if (ccode == cd.code){\r\n                          // get military expenditure\r\n                          entire_mil_exp.forEach(dat =>{\r\n                            if (dat.name == cd.name) {\r\n                              // add item to chart data\r\n                              formattedData.push({\r\n                                threat: 0,   // not threat, that is, friendly\r\n                                value: dat.mil,\r\n                                name: cd.name\r\n                              })  \r\n                            }\r\n                          })\r\n                        }\r\n                      })\r\n\r\n                      // for each threat country\r\n                      threats.forEach(country =>{\r\n                        // map ccode to name\r\n                        codemap.forEach(cd => {\r\n                          if (country == cd.code){\r\n                            // get military expenditure\r\n                            entire_mil_exp.forEach(dat =>{\r\n                              if (dat.name == cd.name) {\r\n                                // add item to formatted data\r\n                                formattedData.push({\r\n                                  threat: 1,\r\n                                  value: dat.mil,\r\n                                  name: cd.name\r\n                                })  \r\n                              }\r\n                            })\r\n                          }\r\n                        })\r\n                      })\r\n\r\n                      // convert to chart data format\r\n                      var chartData = ({\r\n                        children: Array.from(\r\n                          d3.group(\r\n                            formattedData,\r\n                            d => d.threat\r\n                          ),\r\n                          ([, children]) => ({children})\r\n                        )\r\n                      })\r\n\r\n                      // pack data\r\n                      const root = d3.pack()\r\n                        .size([size.width, size.height])\r\n                        .padding(1)\r\n                      (d3.hierarchy(chartData)\r\n                        .sum(d => d.value))\r\n                      \r\n                      // append viewbox\r\n                      var svg2 = d3.select(\"#focus\")\r\n                        .append(\"svg\")\r\n                        .attr(\"id\", \"packed\")\r\n                          .attr(\"viewBox\", [0, 0, size.width, size.height])\r\n                      \r\n                      // draw background circles\r\n                      svg2.append(\"g\")\r\n                          .attr(\"fill\", \"none\")\r\n                          .attr(\"stroke\", \"#ccc\")\r\n                        .selectAll(\"circle\")\r\n                        .data(root.descendants().filter(d => d.height === 1))\r\n                        .join(\"circle\")\r\n                          .attr(\"cx\", d => d.x)\r\n                          .attr(\"cy\", d => d.y)\r\n                          .attr(\"r\", d => d.r);\r\n                      \r\n                      // put packed circles\r\n                      svg.append(\"g\")\r\n                        .selectAll(\"circle\")\r\n                        .data(root.leaves())\r\n                        .join(\"circle\")\r\n                          .attr(\"cx\", d => d.x)\r\n                          .attr(\"cy\", d => d.y)\r\n                          .attr(\"r\", d => d.r)\r\n                          .attr(\"fill\", d => cc_colors[d.data.threat]);\r\n\r\n\r\n                      console.log(chartData)\r\n                    })\r\n                })\r\n            } else {\r\n              // print No data\r\n            }\r\n          })\r\n      }\r\n      \r\n      function reset() {\r\n        svg.transition().duration(750).call(\r\n          zoom.transform,\r\n          d3.zoomIdentity,\r\n          d3.zoomTransform(svg.node()).invert([dimensions.width / 2, dimensions.height / 2])\r\n        );\r\n      }\r\n      \r\n      function zoomed(event) {\r\n        const {transform} = event;\r\n        g.attr(\"transform\", transform);\r\n        g.attr(\"stroke-width\", 1 / transform.k);\r\n      }\r\n    }\r\n\r\n    render(){\r\n        return <div id={\"#\" + this.props.id}></div>\r\n    }\r\n}\r\n\r\nexport default Threats;",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":66,"column":11,"nodeType":"34","messageId":"35","endLine":66,"endColumn":22},{"ruleId":"36","severity":1,"message":"37","line":183,"column":36,"nodeType":"38","messageId":"39","endLine":183,"endColumn":38},{"ruleId":"36","severity":1,"message":"37","line":210,"column":35,"nodeType":"38","messageId":"39","endLine":210,"endColumn":37},{"ruleId":"36","severity":1,"message":"37","line":213,"column":42,"nodeType":"38","messageId":"39","endLine":213,"endColumn":44},{"ruleId":"36","severity":1,"message":"37","line":229,"column":39,"nodeType":"38","messageId":"39","endLine":229,"endColumn":41},{"ruleId":"36","severity":1,"message":"37","line":232,"column":44,"nodeType":"38","messageId":"39","endLine":232,"endColumn":46},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'geoMercator' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]